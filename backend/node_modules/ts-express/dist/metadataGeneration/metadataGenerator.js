"use strict";
const ts = require("typescript");
const controllerGenerator_1 = require("./controllerGenerator");
class MetadataGenerator {
    constructor(entryFile) {
        this.nodes = new Array();
        this.referenceTypes = {};
        this.circularDependencyResolvers = new Array();
        this.program = ts.createProgram([entryFile], {});
        this.typeChecker = this.program.getTypeChecker();
        MetadataGenerator.current = this;
    }
    IsExportedNode(node) { return true; }
    Generate() {
        this.program.getSourceFiles().forEach(sf => {
            ts.forEachChild(sf, node => {
                this.nodes.push(node);
            });
        });
        const controllers = this.buildControllers();
        this.circularDependencyResolvers.forEach(c => c(this.referenceTypes));
        return {
            Controllers: controllers,
            ReferenceTypes: this.referenceTypes
        };
    }
    TypeChecker() {
        return this.typeChecker;
    }
    AddReferenceType(referenceType) {
        this.referenceTypes[referenceType.name] = referenceType;
    }
    GetReferenceType(typeName) {
        return this.referenceTypes[typeName];
    }
    OnFinish(callback) {
        this.circularDependencyResolvers.push(callback);
    }
    buildControllers() {
        return this.nodes
            .filter(node => node.kind === ts.SyntaxKind.ClassDeclaration && this.IsExportedNode(node))
            .map((classDeclaration) => new controllerGenerator_1.ControllerGenerator(classDeclaration))
            .filter(generator => generator.IsValid())
            .map(generator => generator.Generate());
    }
}
exports.MetadataGenerator = MetadataGenerator;
//# sourceMappingURL=metadataGenerator.js.map