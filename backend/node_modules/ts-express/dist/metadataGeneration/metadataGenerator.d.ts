import * as ts from 'typescript';
export declare class MetadataGenerator {
    static current: MetadataGenerator;
    readonly nodes: ts.Node[];
    readonly typeChecker: ts.TypeChecker;
    private readonly program;
    private referenceTypes;
    private circularDependencyResolvers;
    IsExportedNode(node: ts.Node): boolean;
    constructor(entryFile: string);
    Generate(): Metadata;
    TypeChecker(): ts.TypeChecker;
    AddReferenceType(referenceType: ReferenceType): void;
    GetReferenceType(typeName: string): ReferenceType;
    OnFinish(callback: (referenceTypes: {
        [typeName: string]: ReferenceType;
    }) => void): void;
    private buildControllers();
}
export interface Metadata {
    Controllers: Controller[];
    ReferenceTypes: {
        [typeName: string]: ReferenceType;
    };
}
export interface Controller {
    location: string;
    methods: Method[];
    name: string;
    tagName: string;
    jwtUserProperty: string;
}
export interface Method {
    description: string;
    example: any;
    method: string;
    name: string;
    parameters: Parameter[];
    path: string;
    type: Type;
    tags: string[];
    responses: ResponseType[];
    security?: Security;
}
export interface Parameter {
    description: string;
    in: string;
    name: string;
    required: boolean;
    type: Type;
    injected?: boolean;
}
export interface Security {
    name: string;
    scopes?: string[];
}
export declare type Type = PrimitiveType | ReferenceType | ArrayType;
export declare type PrimitiveType = string;
export interface ReferenceType {
    description: string;
    name: string;
    properties: Property[];
    enum?: string[];
}
export interface ResponseType {
    description: string;
    name: string;
    schema?: Type;
}
export interface Property {
    description: string;
    name: string;
    type: Type;
    required: boolean;
}
export interface ArrayType {
    elementType: Type;
}
