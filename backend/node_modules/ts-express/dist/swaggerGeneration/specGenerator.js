"use strict";
class SpecGenerator {
    constructor(metadata, config) {
        this.metadata = metadata;
        this.config = config;
    }
    GenerateSpec(swaggerDir) {
        return this.GetSpec();
    }
    GetSpec() {
        let spec = {
            basePath: this.config.basePath,
            consumes: ['application/json'],
            definitions: this.buildDefinitions(),
            info: {},
            paths: this.buildPaths(),
            produces: ['application/json'],
            swagger: '2.0',
        };
        const securityDefinitions = this.config.securityDefinitions
            ? this.config.securityDefinitions
            : {};
        // Check if we have jwt enabled api
        if (this.metadata.Controllers.some((controller) => controller.jwtUserProperty !== '')) {
            Object.assign(securityDefinitions, this.buildJwtSecurityDefinition());
        }
        spec.securityDefinitions = securityDefinitions;
        if (this.config.description) {
            spec.info.description = this.config.description;
        }
        if (this.config.license) {
            spec.info.license = { name: this.config.license };
        }
        if (this.config.name) {
            spec.info.title = this.config.name;
        }
        if (this.config.version) {
            spec.info.version = this.config.version;
        }
        if (this.config.host) {
            spec.host = this.config.host;
        }
        if (this.config.spec) {
            this.config.specMerging = this.config.specMerging || 'immediate';
            const mergeFuncs = {
                immediate: Object.assign,
                recursive: require('merge').recursive,
            };
            spec = mergeFuncs[this.config.specMerging](spec, this.config.spec);
        }
        return spec;
    }
    buildDefinitions() {
        const definitions = {};
        Object.keys(this.metadata.ReferenceTypes).map(typeName => {
            const referenceType = this.metadata.ReferenceTypes[typeName];
            definitions[referenceType.name] = {
                description: referenceType.description,
                properties: this.buildProperties(referenceType.properties),
                required: referenceType.properties.filter(p => p.required).map(p => p.name),
                type: 'object'
            };
            if (referenceType.enum) {
                definitions[referenceType.name].type = 'string';
                delete definitions[referenceType.name].properties;
                delete definitions[referenceType.name].required;
                definitions[referenceType.name].enum = referenceType.enum;
            }
        });
        return definitions;
    }
    buildJwtSecurityDefinition() {
        return {
            'Bearer': {
                description: 'JWT token with bearer word in front of it',
                in: 'header',
                name: 'Authorization',
                type: 'apiKey'
            }
        };
    }
    buildPaths() {
        const paths = {};
        this.metadata.Controllers.forEach(controller => {
            controller.methods.forEach(method => {
                const path = `${method.path}`;
                paths[path] = paths[path] || {};
                this.buildPathMethod(method, paths[path], controller.jwtUserProperty, controller.tagName);
            });
        });
        return paths;
    }
    buildPathMethod(method, pathObject, jwtUserProperty, tag) {
        const pathMethod = pathObject[method.method] = this.buildOperation(method);
        pathMethod.description = method.description;
        pathMethod.parameters = method.parameters.filter(p => !p.injected).map(p => this.buildParameter(p));
        pathMethod.tags = [tag];
        const security = new Array();
        if (jwtUserProperty !== '') {
            security.push({
                'Bearer': []
            });
        }
        if (method.security) {
            const methodSecurity = {};
            methodSecurity[method.security.name] = method.security.scopes ? method.security.scopes : [];
            security.push(methodSecurity);
        }
        if (security.length > 0) {
            pathMethod.security = security;
        }
        if (pathMethod.parameters.filter((p) => p.in === 'body').length > 1) {
            throw new Error('Only one body parameter allowed per controller method.');
        }
    }
    buildParameter(parameter) {
        const swaggerParameter = {
            description: parameter.description,
            in: parameter.in,
            name: parameter.name,
            required: parameter.required
        };
        const parameterType = this.getSwaggerType(parameter.type);
        if (parameterType.$ref) {
            swaggerParameter.schema = parameterType;
        }
        else {
            swaggerParameter.type = parameterType.type;
        }
        if (parameterType.format) {
            swaggerParameter.format = parameterType.format;
        }
        return swaggerParameter;
    }
    buildProperties(properties) {
        const swaggerProperties = {};
        properties.forEach(property => {
            const swaggerType = this.getSwaggerType(property.type);
            if (!swaggerType.$ref) {
                swaggerType.description = property.description;
            }
            swaggerProperties[property.name] = swaggerType;
        });
        return swaggerProperties;
    }
    buildOperation(method) {
        const swaggerType = this.getSwaggerType(method.type);
        const responses = {};
        method.responses.forEach((res) => {
            responses[res.name] = {
                description: res.description
            };
            if (res.schema) {
                responses[res.name]['schema'] = this.getSwaggerType(res.schema);
            }
        });
        if (swaggerType.type !== 'void') {
            responses['200'] = { description: '', schema: swaggerType };
            if (method.example) {
                responses['200']['examples'] = { 'application/json': method.example };
            }
        }
        else {
            responses['204'] = { description: 'No content' };
        }
        return {
            operationId: method.name,
            produces: ['application/json'],
            responses: responses
        };
    }
    getSwaggerType(type) {
        if (typeof type === 'string' || type instanceof String) {
            return this.getSwaggerTypeForPrimitiveType(type);
        }
        const arrayType = type;
        if (arrayType.elementType) {
            return this.getSwaggerTypeForArrayType(arrayType);
        }
        return this.getSwaggerTypeForReferenceType(type);
    }
    getSwaggerTypeForPrimitiveType(primitiveTypeName) {
        const typeMap = {
            boolean: { type: 'boolean' },
            buffer: { type: 'string', format: 'base64' },
            datetime: { format: 'date-time', type: 'string' },
            number: { format: 'int64', type: 'integer' },
            object: { type: 'object' },
            string: { type: 'string' },
            void: { type: 'void' }
        };
        return typeMap[primitiveTypeName];
    }
    getSwaggerTypeForArrayType(arrayType) {
        const elementType = arrayType.elementType;
        return { items: this.getSwaggerType(elementType), type: 'array' };
    }
    getSwaggerTypeForReferenceType(referenceType) {
        return { $ref: `#/definitions/${referenceType.name}` };
    }
}
exports.SpecGenerator = SpecGenerator;
//# sourceMappingURL=specGenerator.js.map